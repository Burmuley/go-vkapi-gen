{{define "go_type"}}
    {{- $r := (.T.GetGoType true) -}}
    {{- $l := len $r -}}
    {{- if and (le $l 1) (not .T.IsMultiple) -}}
        {{- if (checkNames (index $r 0) .R) -}}
            {{printf " *%s" (index $r 0) -}}
        {{- else -}}
            {{printf " %s" (index $r 0) -}}
        {{end -}}
    {{else -}}
        {{- print " struct {\n" -}}
        {{- range $t := $r -}}
            {{ printf "\t\t%s\n" $t -}}
        {{end -}}
        {{print "}" -}}
    {{end -}}
{{end}}
{{define "go_multitype"}}
    {{- $r := (.GetProperties true) -}}
{{/*    {{- $l := len $r -}}*/}}
    {{- print " struct {\n" -}}
    {{- range $k, $v := $r -}}
        {{print "\t\t"}}{{$k}}{{template "go_type" (deco $v $k)}}
    {{end -}}
    {{print "}" -}}
{{end}}
{{range $key, $value := . -}}
{{$tname := (convertName $key) -}}
// {{$tname}} type represents `{{$key}}` API object
{{if or $value.IsInt $value.IsString $value.IsBuiltin $value.IsArray $value.IsNumber $value.IsInterface -}}
type {{$tname}} {{template "go_type" (deco $value $tname)}}{{ if (len $value.GetDescription) gt 0}} // {{$value.GetDescription}}{{end}}
{{else if $value.IsObject -}}
type {{$tname -}}
    {{if $value.IsObject -}}
        {{printf " %s" "struct {"}}
    {{range $ok, $ov := ($value.GetProperties true) -}}
        {{print "\t"}}{{convertName $ok}} {{if $ov.IsArray}}[]{{end}}{{template "go_type" (deco $ov $tname)}} `json:"{{$ok}}"`  {{ if (len $ov.GetDescription) gt 0}}// {{$ov.GetDescription}}{{end}}
    {{end -}}
    {{end -}}
}
{{else if $value.IsMultiple -}}
type {{$tname -}} {{template "go_type" (deco $value $tname)}}
{{end}}
{{end -}}
