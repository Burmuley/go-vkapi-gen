{{define "go_type"}}
    {{- $r := .T.GetGoType -}}
    {{- if not (IsMultiple .T) -}}
        {{- if (checkNames $r .R) -}}
            {{printf " *%s" $r -}}
        {{- else -}}
            {{printf " %s" $r -}}
        {{end -}}
    {{else -}}
        {{- print " struct {\n" -}}
        {{ printf "\t\t%s\n" $r -}}
        {{print "}" -}}
    {{end -}}
{{end}}
{{define "go_multitype"}}
    {{- $r := (.GetProperties true) -}}
    {{- print " struct {\n" -}}
    {{- range $k, $v := $r -}}
        {{print "\t\t"}}{{$k}}{{template "go_type" (deco $v $k)}}
    {{end -}}
    {{print "}" -}}
{{end}}
{{range $key, $value := . -}}
{{$tname := (convertName $key) -}}
// {{$tname}} type represents `{{$key}}` API object
{{if or (IsInt $value) (IsString $value) (IsBuiltin $value) (IsArray $value) (IsNumber $value) (IsInterface $value) -}}
type {{$tname}} {{template "go_type" (deco $value $tname)}}{{ if (len $value.GetDescription) gt 0}} // {{$value.GetDescription}}{{end}}
{{else if (IsObject $value) -}}
type {{$tname -}}
    {{if (IsObject $value) -}}
        {{printf " %s" "struct {"}}
    {{range $ok, $ov := ($value.GetProperties true) -}}
        {{print "\t"}}{{convertName $ok}} {{if (IsArray $ov)}}[]{{end}}{{template "go_type" (deco $ov $tname)}} `json:"{{$ok}}"`  {{ if (len $ov.GetDescription) gt 0}}// {{$ov.GetDescription}}{{end}}
    {{end -}}
    {{end -}}
}
{{else if (IsMultiple $value) -}}
type {{$tname -}} {{template "go_type" (deco $value $tname)}}
{{end}}
{{end -}}
